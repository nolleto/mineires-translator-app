{"version":3,"sources":["serviceWorker.js","mineires/replacer.js","components/Footer/index.js","components/Header/index.js","components/InputText/index.js","mineires/translator.js","components/TranslatedLinesItem/index.js","components/TranslatedLines/index.js","components/TranslatedText/index.js","pages/Home/index.js","index.js"],"names":["Boolean","window","location","hostname","match","json","Footer","react_default","a","createElement","className","href","Header","InputText","_ref","text","setText","value","onChange","_ref2","target","stringToRegex","str","RegExp","replaceAccentsInString","Object","keys","ACCENTS","reduce","acc","letter","replace","getTargetPhrases","phrases","Array","isArray","executeReplacesInText","_len","arguments","length","replaces","_key","PHRASES","textToReplace","newPhrase","targetPhrase","phrase","regex","concat","newWord","targetWord","word","split","map","join","creatorWordReplaces","WORDS","creatorSuffixReplaces","SUFFIXS","TranslatedLinesItem","capitalize","toMineires","TranslatedLines","lines","filter","string","trim","src_components_TranslatedLinesItem","key","TranslatedText","src_components_TranslatedLines","App","_useState","useState","_useState2","slicedToArray","components_Header","src_components_InputText","src_components_TranslatedText","components_Footer","ReactDOM","render","pages_Home","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e8ecc2a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ACCENTS from './constants/accents.json';\n\nconst BEGIN_PHRASE = '(^| )'\nconst END_PHRASE = '( |\\\\.|,|!|\\\\?|$)'\n\nconst stringToRegex = str => new RegExp(str, 'ig');\nconst createPhraseRegex = phrase => stringToRegex(replaceAccentsInString(`${BEGIN_PHRASE}(${phrase})${END_PHRASE}`));\nconst createWordRegex = word => stringToRegex(replaceAccentsInString(`${BEGIN_PHRASE}(${word})${END_PHRASE}`));\nconst createSuffixRegex = word => stringToRegex(`([a-z]+)(${replaceAccentsInString(word)})${END_PHRASE}`);\n\nconst replaceAccentsInString = str => {\n  return Object.keys(ACCENTS).reduce((acc, letter) => {\n    return acc.replace(new RegExp(letter, 'ig'), ACCENTS[letter]);\n  }, str);\n};\n\nconst getTargetPhrases = phrases => {\n  if (Array.isArray(phrases)) return phrases;\n  return [phrases];\n};\n\nexport const creatorPhraseReplaces = json => text => {\n  return Object.keys(json).reduce((textToReplace, newPhrase) => {\n    const targetPhrases = getTargetPhrases(json[newPhrase]);\n\n    return targetPhrases.reduce((acc, targetPhrase) => {\n      const regex = createPhraseRegex(targetPhrase);\n\n      return acc.replace(regex, `$1${newPhrase}$3`);\n    }, textToReplace);\n  }, text);\n};\n\nexport const creatorWordReplaces = json => text => {\n  return Object.keys(json).reduce((textToReplace, newWord) => {\n    const targetWords = getTargetPhrases(json[newWord]);\n\n    return targetWords.reduce((acc, targetWord) => {\n      const regex = createWordRegex(targetWord);\n\n      return acc.split(' ').map(\n        word => word.replace(regex, `$1${newWord}$3`)\n      ).join(' ');\n    }, textToReplace);\n  }, text);\n};\n\nexport const creatorSuffixReplaces = json => text => {\n  return Object.keys(json).reduce((textToReplace, newWord) => {\n    const targetWords = getTargetPhrases(json[newWord]);\n\n    return targetWords.reduce((acc, targetWord) => {\n      const regex = createSuffixRegex(targetWord);\n\n      return acc.replace(regex, `$1${newWord}$3`);\n    }, textToReplace);\n  }, text);\n};\n\nexport const executeReplacesInText = (...replaces) => text => {\n  return replaces.reduce((acc, replace) => replace(acc), text);\n};\n","import './style.css';\n\nimport React from 'react';\n\nconst Footer = () => (\n  <footer className='footer'>\n    <div className='footer__line'/>\n\n    <p>\n      Made with <span className='footer--red'>❤︎</span> by <a href='https://twitter.com/FelipeNolleto'>nolleto</a>.\n      Find this on <a href='https://github.com/nolleto/mineires-translator-app'>github</a></p>\n  </footer>\n)\n\nexport default Footer\n","import React from 'react';\n\nconst Header = () => (\n  <header className='header'>\n    <h1>Mineirês Translator</h1>\n  </header>\n);\n\nexport default Header;\n","import './index.css';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst InputText = ({ text, setText }) => {\n  return (\n    <div className='input-text'>\n      <span className='input-text__span'>\n        Texto em Português\n      </span>\n\n      <textarea\n        className='input-text__textarea'\n        value={text}\n        onChange={({ target }) => setText(target.value)}\n      />\n    </div>\n  )\n};\n\nInputText.propTypes = {\n  text: PropTypes.string,\n  setText: PropTypes.func.isRequired\n};\n\nexport default InputText;\n","import {\n  creatorPhraseReplaces,\n  creatorSuffixReplaces,\n  creatorWordReplaces,\n  executeReplacesInText\n} from './replacer';\n\nimport PHRASES from './constants/phrases.json';\nimport SUFFIXS from './constants/suffixs.json';\nimport WORDS from './constants/words.json';\n\nexport default executeReplacesInText(\n  creatorPhraseReplaces(PHRASES),\n  creatorWordReplaces(WORDS),\n  creatorSuffixReplaces(SUFFIXS),\n);\n","import './index.css';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport capitalize from 'capitalize';\nimport toMineires from '../../mineires/translator';\n\nconst TranslatedLinesItem = ({ text }) => (\n  <p className='translated-lines-item'>\n    {capitalize(toMineires(text))}\n  </p>\n);\n\nTranslatedLinesItem.propTypes = {\n  text: PropTypes.string.isRequired\n};\n\nexport default TranslatedLinesItem;\n","import './index.css';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport TranslatedLinesItem from '../TranslatedLinesItem';\n\nconst TranslatedLines = ({ lines }) => {\n  const notEmpty = string => string.trim() !== '';\n  const toTranslatedLinesItem = text => (\n    <TranslatedLinesItem\n      key={text}\n      text={text}\n    />\n  );\n\n  return (\n    <div className='translated-lines'>\n      {lines.filter(notEmpty).map(toTranslatedLinesItem)}\n    </div>\n  );\n};\n\nTranslatedLines.propTypes = {\n  lines: PropTypes.arrayOf(PropTypes.string)\n};\n\nexport default TranslatedLines;\n","import './index.css';\n\nimport React from 'react';\nimport TranslatedLines from '../TranslatedLines';\n\nconst TranslatedText = ({ text }) => {\n  return (\n    <div className='translated-text'>\n      <span className='translated-text__span'>\n        Texto em Mineirês\n      </span>\n\n      <TranslatedLines\n        lines={text.split('\\n')}\n      />\n    </div>\n  )\n}\n\nexport default TranslatedText\n","import './index.css';\n\nimport React, { useState } from 'react';\n\nimport Footer from '../../components/Footer';\nimport Header from '../../components/Header';\nimport InputText from '../../components/InputText';\nimport TranslatedText from '../../components/TranslatedText';\n\nconst App = () =>  {\n  const [text, setText] = useState('Quanto está o litro de leite?\\nQue horas são?');\n\n  return (\n    <div className='home'>\n      <Header />\n\n      <div className='home__content'>\n        <InputText text={text} setText={setText} />\n        <TranslatedText text={text} />\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport Home from './pages/Home';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(<Home />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}